1 git的使用
	通过git管理github托管项目代码
	git中文手册 https://git-scm.com/book/zh/v2
	git官网下载 https://git-scm.com/

2 基本概念-工作区域
	2.1 工作区(working directory)添加\编辑\修改文件等动作
	2.2 暂存区(stage(index)) 暂存已经修改的文件最后统一提交到git仓库中
	2.3 git仓库(git respository(head))最终确定的文件保存到仓库,成为一个新的版本,并且对他人可见

3 git基础设置
	git安装之后,需要进行一些基本设置
	3.1 设置用户名
	git config --global user.name 'yourName'
	3.2 设置用户名邮箱
	git config --global user.email 'yourEmail'
	3.3 查看设置
	git config --list
	注意该设置会在你提交文件时候github仓库中显示你的信息

4 创建一个本地git仓库
	4.1 新建一个文件夹
	4.2 进入该文件夹使用git init初始化
	4.3 查看创建隐藏文件

5 向仓库中添加文件流程
	git status #查看文件的状态
	工作区-暂存区
	git add <文件名(可选)>        #工作区提交文件暂存区
	git checkout <文件名(可选)>   #把暂存区域文件还原到工作目录
	暂存区-git仓库
	git commit -m "提交描述"
	git reset HEAD~              #git仓库文件换到暂存区域(1个～表示恢复到上一个快照，2个～表示恢复到上上个快照...也可以这样写git reset HEAD~2)

	reset 命令选项
		git reset --mixed HEAD~
		-移动HEAD的指向，将其指向上一个快照
		-将HEAD移动后指向的快照回滚到暂存区域
		git reset --soft HEAD~
		-移动HEAD的指向，将其指向上一个快照
		git reset --hard HEAD~
		-移动HEAD的指向，将其指向上一个快照
		-将HEAD移动后指向的快照回滚到暂存区域
		-将暂存区域的文件还原到工作目录
		git reset 快照版本的id号（使用git log命令查看）
		git reset 版本快照 文件名/路径（这个会忽略移动HEAD指针这个步骤）

6 修改仓库文件
	6.1 修改文件
	6.2 git status查看文件状态,使用git add 提交文件到暂存区,git commit -m "提交描述" 提交文件到git仓库

	git commit --amend [-m]             #“更正”最近一次提交

	git mv 旧文件名 新文件名  #git重命名文件
	相当于：
	ren/mv 旧文件名 新文件名
	git rm 旧文件名
	git add 新文件名

7 删除仓库文件
	7.1 删除文件
	7.2 从git中删除文件 git rm fileName
	7.3 提交操作 git commit -m "提交描述"

	7.4 git删除文件
		git rm 文件名       #该命令删除的知识点工作目录和暂存区域的文件，也就是取消跟踪，在下次提交时不纳入版本管理；
		                    #当工作目录和暂存区域的同一个文件存在不同内容时，执行git rm -f 文件名 命令就可以把两个文件都删除
		                    #如果只是删除暂存区域的文件（保留工作目录的）那么可以执行 git rm --cached 文件名命令实现
		                    #如果文件已经纳入git仓库，想要删除，就要使用git reset命令，将HEAD指针回退。

8 查看命令
	git status #查看文件状态（三个工作区）
	git logs   #查看历史提交
	git diff
	默认比较当前的工作区和暂存区的文件
		
	操作实例
		$ git diff                       #键入的命令
		diff --git a/main.c b/main.c     #a是暂存区，b是工作区
		index e303124..912b756 100644    #e303124..912b756是两文件文件的ID和100644是文件类型及权限
		--- a/main.c
		+++ b/main.c
		@@ -1 +1,2 @@                    #-1表示旧文件，+1表示新文件，2表示文件持续的文件行数
		 new main.c
		+new main.c

	git diff 快照ID1 快照ID2		#比较两个历史快照
	git diff 快照ID		                #比较当前工作目录和git仓库中的快照
	git diff --cached [快照ID]		#比较暂存区域和git仓库快照

9 git管理远程仓库
	使用目的:备份\实现代码共享集中化管理
	如何将本地仓库中代码同步到git远程仓库中?
	使用git push,将本地仓库提交到远程
	9.1 克隆操作
		git clone 远程仓库地址

	解决git push错误
		the requested URL returned error:403 Forbidden while accessing
		私有项目,没有权限,输入用户名密码,或者远程仓库地址采用这种形式
		vi .git/config
		#将
		[remote "origin"] url=https://github.com/用户名/仓库名.git
		#修改为
		[remote "origin"] url=https://用户名:密码@github.com/用户名/仓库名.git

10 github pages 搭建网站
	个人网站
	访问
	https://用户名.github.io
	步骤
		1)创建个人站点 -> 新建仓库（注意：仓库名必须是 用户名.github.io）
		2)在仓库下新建index.html的文件
	project page 项目站点
		注意：github pages只支持静态网页且仓库里面只能是.html文件

	项目站点
		访问：https://用户名.github.io/仓库名
	搭建步骤：
		1)进入项目主页，点击settings
		2)在settings页面，点击[Launch automatic page generator]来自动生成主题页面
		3)新建站点基础信息设置
		4)选择主题
		5)生成网页

11 git分支管理
	11.1 常用操作
	git branch 分支名                             #git 创建分支
	git log --decorate --oneline --graph --all    #经典查看仓库状态  
	checkout out 分支名                           #切换分支
	git merge 分支名                              #合并分支，将制定的分分支合并到当前的分支
	
	问题：
	CONFLICT...文件冲突，同名文件不同文件内容
	解决方法：
	手动修改冲突。使用git status 查看当前分支文件的状态，git会显示有冲突的文件名，同时会在文件中进行标记冲突的内容，方便修改。
	git checkout -b 分支名 创建分支，并切换到创建的分支

	git branch -d 分支名                          #删除分支

	匿名分支 HEAD指针处于游离状态，使用git checkout 当前分的文件状态ID（可以使用git log进行查看），这种状态git会有相应的提示和警告。当你使用git checkout 当前实验的分支，则在匿名分支中所作的修改就会不见。所以匿名分支可以进行一些实验性的操作。

	11.2 git checkout和git reset的区别：
		11.2.1 恢复文件
			git checkout HEAD~（/快照ID） 文件名
			git reset HEAD~（/快照ID） 文件名
			checkout命令和reset命令都可以用于恢复指定快照的指定文件，并且它们都不会改变HEAD指针的指向。
			它们的区别是reset命令只将指定文件恢复到暂存区域（--mixed），而checkout命令是同时覆盖暂存区域和工作目录。（此时reset是不允许使用--soft和--hard选项的），显然，使用reset会更安全一点。
		11.2.1 恢复快照
		git checkout HEAD~（/快照ID）
		git reset HEAD~（/快照ID）
		reset命令是的用于“回到过去”，根据选项的不同，reset命令将移动HEAD指针（--soft）覆暂存区域（--mixed,默认）覆盖工作区域目录（--hard）
		checkout命令用于切换分支，但事实上也是通过移动HEAD指针和覆盖暂存区域、工作目录来实现的。
		区别是reset --hard，checkout命令会更安全一些，checkout命令在切换分支之前会先检查一下当前的工作状态，如果不是“clean”的话，git不会允许你这样做。reset会直接覆盖所有数据。
		reset会移动HEAD所在的分支指向，而checkout只会移动HEAD自身来指向另一个分支

12 其他注意事项
	兼容性问题，windows文档，尽量保存为utf-8无bom编码格式。
	https://www.processon.com 免费在线作图，实时协作

